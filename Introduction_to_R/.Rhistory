SF <- readOGR(dsn = "./Data/", layer = "tl_2010_06075_tract10")
library(rgdal)
SF <- readOGR(dsn = "./Data/", layer = "tl_2010_06075_tract10")
str(SF)
slotNames(SF)
SF@proj4string
SF@data
slot(SF,"data")
311_data <- read.csv(./data/311.csv)
data_311 <- read.csv(./data/311.csv)
data_311 <- read.csv("./data/311.csv")
head(data_311)
data_311 <- read.csv("./data/311.csv")
head(data_311)
slotNames(SF)
SF$proj4string
SF@proj4string
SP_311 <- SpatialPointsDataFrame(coords = c(data_311$lon, data_311$lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
c(data_311$lon, data_311$lat)
head(data_311)
SP_311 <- SpatialPointsDataFrame(coords = c(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
View(data_311)
data_311 <- read.csv("./data/311.csv")
View(data_311)
SP_311 <- SpatialPointsDataFrame(coords = c(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
?SpatialPointsDataFrame
SP_311 <- SpatialPointsDataFrame(coords = data.frame(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
plot(SP_311)
data_311 <- read.csv("./data/311.csv")
SP_311 <- SpatialPointsDataFrame(coords = data.frame(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
plot(SP_311)
View(data_311)
?subset
View(data_311)
table(data_311$Category)
sewer_issues <- subset(data_311,Category == "Sewer Issues")
View(sewer_issues)
sewer_issues <- data_311[data_311$Category == "Sewer Issues",]
sewer_issues_IDs <- subset(data_311,Category == "Sewer Issues", select = "CaseID") #returns a data frame
View(sewer_issues_IDs)
sewer_issues_IDs
SF <- readOGR(dsn = "./Data/", layer = "tl_2010_06075_tract10")
plot(SF)
head(SF@data)
plot(SF[SF@data$GEOID10 != "06075980401",])
plot(SF)
plot(SF[SF@data$GEOID10 == "06075980401",])
plot(SF[SF@data$GEOID10 != "06075980401",])
plot(SF[SF@data$GEOID10 == "06075980401",])
SF <- SF[SF@data$GEOID10 != "06075980401",] #Overwrites the SF object
plot(SF)
head(SF@data)
View(SF@data)
#Create two vectors
a <- rep(2010:2017, each = 4) # this uses the rep() function to repeat values
b <- round(runif(32, 0, 40)) # runif can be used to generate random numbers - in this case between 0 and 40
#Create data frame
c <- data.frame(a,b)
#head returns the topc six rows
head(c)
#Create a list of numbers
a <- 1:25 #The colon signifies a range
a
#Create a matrix with 5 rows and 5 columns
b <- matrix(a,nrow=5, ncol=5)
b
#Multiply b by 10
b*10
#Multiply b * b
b*b
#Extract first row
b[1,]
#Extract fourth column
b[,4]
#Extract third and fourth columns
b[,3:4] # The colon is used to define a numeric vector between the two numbers
#Extract first and fourth rows
b[c(1,5),] # The c() is used to create a numeric vector with the numbers separated by a comma
#Extract the value in the third row and fourth column
b[3,4]
#Return all the values in the column called "a"
c$a
#A different way of returning the column called "a"
c[,"a"]
colnames(c)
colnames(c) <- c("Year","Count")
#Read CSV file - creates a data frame called earnings
earnings <- read.csv("./data/ACS_14_5YR_S2001_with_ann.csv")
#Show column headings
colnames(earnings)
#UID - Tract ID
#pop - estimated total populaion over 16 with income
#pop_m - estimated total populaion over 16 with income (margin of error)
#earnings - estimated median earnings
#earnings - estimated median earnings (margin of error)
str(earnings)
#Load package
library(XLConnect)
install.packages("XLConnect")
#Create two vectors
a <- rep(2010:2017, each = 4) # this uses the rep() function to repeat values
b <- round(runif(32, 0, 40)) # runif can be used to generate random numbers - in this case between 0 and 40
#Create data frame
c <- data.frame(a,b)
#head returns the topc six rows
head(c)
#Create a list of numbers
a <- 1:25 #The colon signifies a range
a
#Create a matrix with 5 rows and 5 columns
b <- matrix(a,nrow=5, ncol=5)
b
#Multiply b by 10
b*10
#Multiply b * b
b*b
#Extract first row
b[1,]
#Extract fourth column
b[,4]
#Extract third and fourth columns
b[,3:4] # The colon is used to define a numeric vector between the two numbers
#Extract first and fourth rows
b[c(1,5),] # The c() is used to create a numeric vector with the numbers separated by a comma
#Extract the value in the third row and fourth column
b[3,4]
#Return all the values in the column called "a"
c$a
#A different way of returning the column called "a"
c[,"a"]
colnames(c)
colnames(c) <- c("Year","Count")
#Read CSV file - creates a data frame called earnings
earnings <- read.csv("./data/ACS_14_5YR_S2001_with_ann.csv")
#Show column headings
colnames(earnings)
#UID - Tract ID
#pop - estimated total populaion over 16 with income
#pop_m - estimated total populaion over 16 with income (margin of error)
#earnings - estimated median earnings
#earnings - estimated median earnings (margin of error)
str(earnings)
#Load package
library(XLConnect)
#Read workbook
workbook <- loadWorkbook("./data/tfl-daily-cycle-hires.xls")
#Read the Data Sheet
cycle_hire <- readWorksheet(workbook, sheet="Data")
#Load package
library(rgdal)
# Read Shapefile
SF <- readOGR(dsn = "./Data/", layer = "tl_2010_06075_tract10")
plot(SF)
#. The slotNames() function prints their names.
slotNames(SF)
#Show the top rows of the data object
head(SF@data)
# Read csv into R
data_311 <- read.csv("./data/311.csv")
# Have a look at the structure
head(data_311)
# Create the SpatialPointsDataFrame
SP_311 <- SpatialPointsDataFrame(coords = data.frame(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
# Show the results
plot(SP_311)
#Create a table of frequencies by the categories used within the 311 data
table(data_311$Category)
# Use the subset() function to extract rows from the data which relate to Sewer Issues
sewer_issues <- subset(data_311,Category == "Sewer Issues")
# Use the square brackets "[]" to perform the same task
sewer_issues <- data_311[data_311$Category == "Sewer Issues",]
# Extract a list of IDs for the "Sewer Issues"
sewer_issues_IDs <- subset(data_311,Category == "Sewer Issues", select = "CaseID")
plot(SF[SF@data$GEOID10 != "06075980401",]) # Removes Farallon Islands from the plot
plot(SF[SF@data$GEOID10 == "06075980401",]) # Only plots Farallon Islands
SF <- SF[SF@data$GEOID10 != "06075980401",] # Overwrites the SF object
#Load library
library("raster")
#Read in coastal outline (Source from - https://www.census.gov/geo/maps-data/data/cbf/cbf_counties.html)
coast <- readOGR(dsn = "./Data/", layer = "cb_2015_us_county_500k")
SF_clipped <- crop(SF, coast) # Clip the the SF spatial data frame object to the coastline
#Plot the results
plot(SF_clipped)
library(spatialEco)
install.packages("spatialEco")
#Create two vectors
a <- rep(2010:2017, each = 4) # this uses the rep() function to repeat values
b <- round(runif(32, 0, 40)) # runif can be used to generate random numbers - in this case between 0 and 40
#Create data frame
c <- data.frame(a,b)
#head returns the topc six rows
head(c)
#Create a list of numbers
a <- 1:25 #The colon signifies a range
a
#Create a matrix with 5 rows and 5 columns
b <- matrix(a,nrow=5, ncol=5)
b
#Multiply b by 10
b*10
#Multiply b * b
b*b
#Extract first row
b[1,]
#Extract fourth column
b[,4]
#Extract third and fourth columns
b[,3:4] # The colon is used to define a numeric vector between the two numbers
#Extract first and fourth rows
b[c(1,5),] # The c() is used to create a numeric vector with the numbers separated by a comma
#Extract the value in the third row and fourth column
b[3,4]
#Return all the values in the column called "a"
c$a
#A different way of returning the column called "a"
c[,"a"]
colnames(c)
colnames(c) <- c("Year","Count")
#Read CSV file - creates a data frame called earnings
earnings <- read.csv("./data/ACS_14_5YR_S2001_with_ann.csv")
#Show column headings
colnames(earnings)
#UID - Tract ID
#pop - estimated total populaion over 16 with income
#pop_m - estimated total populaion over 16 with income (margin of error)
#earnings - estimated median earnings
#earnings - estimated median earnings (margin of error)
str(earnings)
#Load package
library(XLConnect)
#Read workbook
workbook <- loadWorkbook("./data/tfl-daily-cycle-hires.xls")
#Read the Data Sheet
cycle_hire <- readWorksheet(workbook, sheet="Data")
#Load package
library(rgdal)
# Read Shapefile
SF <- readOGR(dsn = "./Data/", layer = "tl_2010_06075_tract10")
plot(SF)
#. The slotNames() function prints their names.
slotNames(SF)
#Show the top rows of the data object
head(SF@data)
# Read csv into R
data_311 <- read.csv("./data/311.csv")
# Have a look at the structure
head(data_311)
# Create the SpatialPointsDataFrame
SP_311 <- SpatialPointsDataFrame(coords = data.frame(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
# Show the results
plot(SP_311)
#Create a table of frequencies by the categories used within the 311 data
table(data_311$Category)
# Use the subset() function to extract rows from the data which relate to Sewer Issues
sewer_issues <- subset(data_311,Category == "Sewer Issues")
# Use the square brackets "[]" to perform the same task
sewer_issues <- data_311[data_311$Category == "Sewer Issues",]
# Extract a list of IDs for the "Sewer Issues"
sewer_issues_IDs <- subset(data_311,Category == "Sewer Issues", select = "CaseID")
plot(SF[SF@data$GEOID10 != "06075980401",]) # Removes Farallon Islands from the plot
plot(SF[SF@data$GEOID10 == "06075980401",]) # Only plots Farallon Islands
SF <- SF[SF@data$GEOID10 != "06075980401",] # Overwrites the SF object
#Load library
library("raster")
#Read in coastal outline (Source from - https://www.census.gov/geo/maps-data/data/cbf/cbf_counties.html)
coast <- readOGR(dsn = "./Data/", layer = "cb_2015_us_county_500k")
SF_clipped <- crop(SF, coast) # Clip the the SF spatial data frame object to the coastline
#Plot the results
plot(SF_clipped)
library(spatialEco)
SP_311_PIP <- point.in.poly(SP_311, coast) # Clip the the SF spatial data frame object to the coastline
plot(SP_311_PIP)
#Read CSV file - creates a data frame called earnings
bachelors <- read.csv("./data/ACS_14_5YR_S1501_with_ann.csv")
#UID - Tract ID
#Bachelor_Higher - Bachelor degree or higher %
#Bachelor_Higher_m - Bachelor degree or higher % (margin of error)
#Perform the merge
SF_Tract_ACS <- merge(x=earnings,y=bachelors,by.x="UID",by.y="UID")
SF_Tract_ACS <- merge(earnings,bachelors,by="UID")# An alternative method to the above, but a shortened version as the ID columns are the same on both tables
#You can also use all.x=TRUE (or all.y=TRUE) to keep all the rows from either the x or y table - for more details type ?merge()
#The combined table now looks like
head(SF_Tract_ACS) # shows the top of the table
#Remind yourself what the data look like...
head(SF_clipped@data)
SF_clipped@data <- data.frame(SF_clipped@data[,"GEOID10"]) #Makes a new version of the @data slot with just the values of the GEOID10 column - this is wrapped with the data.frame() function
#The data frame within the data slot now looks as follows
head(SF_clipped)
colnames(SF_clipped@data) <- "GEOID10" #Update column names
head(SF_clipped@data) #Check the updated values
head(SF_Tract_ACS) # show the top of the SF_Tract_ACS object
# Creates a new variable with a leading zero
SF_Tract_ACS$GEOID10 <- paste0("0",SF_Tract_ACS$UID)
head(SF_Tract_ACS)
str(SF_Tract_ACS)
SF_Tract_ACS$UID <- NULL
#Replace the "-" and "*" characters
SF_Tract_ACS$earnings <- gsub("-",NA,SF_Tract_ACS$earnings,fixed=TRUE) #replace the "-" values with NA
SF_Tract_ACS$earnings_m <- gsub("**",NA,SF_Tract_ACS$earnings_m,fixed=TRUE) #replace the "**" values with NA
SF_Tract_ACS$Bachelor_Higher <- gsub("-",NA,SF_Tract_ACS$Bachelor_Higher,fixed=TRUE) #replace the "-" values with NA
SF_Tract_ACS$Bachelor_Higher_m <- gsub("**",NA,SF_Tract_ACS$Bachelor_Higher_m,fixed=TRUE) #replace the "**" values with NA
SF_Tract_ACS$earnings <- as.numeric(SF_Tract_ACS$earnings)
SF_Tract_ACS$earnings_m <- as.numeric(SF_Tract_ACS$earnings_m)
SF_Tract_ACS$Bachelor_Higher <- as.numeric(SF_Tract_ACS$Bachelor_Higher)
SF_Tract_ACS$Bachelor_Higher_m <- as.numeric(SF_Tract_ACS$Bachelor_Higher_m )
str(SF_Tract_ACS)
SF_clipped <- merge(SF_clipped,SF_Tract_ACS, by="GEOID10") # merge
head(SF_clipped@data)#show the attribute data
head(SP_311_PIP@data)
plot(point_plot)
SP_311_PIP@data <- data.frame(SP_311_PIP@data[,"data_311.Category])
SP_311_PIP@data <- data.frame(SP_311_PIP@data[,"data_311.Category"])
SP_311_PIP@data
head(SP_311_PIP@data)
head(SF@data)
head(SF_clipped@data)
SF_clipped_311 <- point.in.poly(SP_311_PIP, SF_clipped) # point in polgon
plot(SP_311_PIP)
plot(SF_clipped)
?point.in.poly
point.in.poly
