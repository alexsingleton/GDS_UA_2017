rep(2000:2002, each = 3)
round(runif(9, 0, 20)
)
round(runif(9, 0, 20)0
round(runif(9, 0, 20))
?runif
a <- rep(2010:2017, each = 4) # this uses the rep() function to repeat values
b <- round(runif(9, 0, 40)) # runif can be used to generate random numbers - in this case between 0 and 40
data.frame(a,b)
a <- rep(2010:2017, each = 4) # this uses the rep() function to repeat values
b <- round(runif(32, 0, 40)) # runif can be used to generate random numbers - in this case between 0 and 40
data.frame(a,b)
c <- data.frame(a,b,a)
c
head(c)
a <- 1:25 #The colon signifies a range
a
matrix(a,nrow=5, ncol=5)
b*10
b <- matrix(a,nrow=5, ncol=5)
b
b
b*10
b*10
b*b
colnames(b)
colnames(b) <- c("1","2")
colnames(b) <- c("1","2","3")
colnames(b) <- c("1","2","3","4","5")
b
b[1,]
c[,4]
b[,4]
b[,3:4]
b[c(1,4),]
b[c(1,4),] # The c() is used to create a numeric vector with the numbers separated by a comma
b[c(1,5),] # The c() is used to create a numeric vector with the numbers separated by a comma
b <- matrix(a,nrow=5, ncol=5)
b
#Extract first row
b[1,]
#Extract fourth column
b[,4]
#Extract third and fourth columns
b[,3:4] # The colon is used to define a numeric vector between the two numbers
#Extract first and fourth rows
b[c(1,5),] # The c() is used to create a numeric vector with the numbers separated by a comma
b[3,4]
head(c)
c$a
c["a",]
c[,"a"]
colnames(c)
c <- data.frame(a,b)
a <- rep(2010:2017, each = 4) # this uses the rep() function to repeat values
b <- round(runif(32, 0, 40)) # runif can be used to generate random numbers - in this case between 0 and 40
c <- data.frame(a,b)
c
head(c)
colnames(c) <- c("Year","Count")
c
earnings <- read.csv("./data/ACS_14_5YR_S2001_with_ann.csv")
colnames(earnings)
apply(earnings,2,class)
View(earnings)
mean(earnings$pop)
lapply(earnings,2,class)
lapply(earnings,class)
apply(earnings,class)
lapply(earnings,class)
str(earnings)
?str
str(earnings)
install.packages("XLConnect")
getwd()
df <- readWorksheet("https://files.datapress.com/london/dataset/london-average-air-quality-levels/2016-12-01T09:53:41/air-quality-london.xls", sheet=2)
library(XLConnect)
df <- readWorksheet("https://files.datapress.com/london/dataset/london-average-air-quality-levels/2016-12-01T09:53:41/air-quality-london.xls", sheet=2)
download.file("https://files.datapress.com/london/dataset/london-average-air-quality-levels/2016-12-01T09:53:41/air-quality-london.xls")
download.file("https://files.datapress.com/london/dataset/number-bicycle-hires/2016-11-16T08:14:05/tfl-daily-cycle-hires.xls","tfl-daily-cycle-hires.xls")
download.file("https://files.datapress.com/london/dataset/number-bicycle-hires/2016-11-16T08:14:05/tfl-daily-cycle-hires.xls","./data/tfl-daily-cycle-hires.xls")
cycle_hire <- readWorksheet("./data/tfl-daily-cycle-hires.xls", sheet=2)
cycle_hire <- readWorksheet("./data/tfl-daily-cycle-hires.xls", sheet="Data")
workbook <- loadWorkbook("./data/tfl-daily-cycle-hires.xls")
cycle_hire <- readWorksheet(workbook, sheet="Data")
View(cycle_hire)
library(rgdal)
SF <- readOGR(dsn = "./Data/", layer = "geo_export_6cf3baee-55fd-4f1d-a539-76e4623b4b45")
plot(SF)
SF <- readOGR(dsn = "./Data/", layer = "tl_2010_06075_tract10")
plot(SF)
getSlots(SF)
slots(SF)
